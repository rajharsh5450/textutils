{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alerts.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","class","onClick","togglemode","role","htmlFor","TextForm","useState","text","setText","heading","style","backgroundColor","color","value","placeholder","onChange","event","target","rows","toUpperCase","showalert","toLowerCase","ar","split","str","forEach","element","trim","charAt","slice","navigator","clipboard","writeText","length","Alerts","alert","word","capitalise","msg","App","setmode","setalert","showAlert","setTimeout","aboutText","document","body","background","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6f212ecb.chunk.js","sourcesContent":["import React from \"react\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        {/* <Link className=\"navbar-brand\" to=\"/\">\r\n          {props.title}\r\n        </Link> */}\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            {/* <li className=\"nav-item\">\r\n              <Link className=\"nav-link \" aria-current=\"page\" to=\"/\">\r\n                Home\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">\r\n                {props.aboutText}\r\n              </Link>\r\n            </li> */}\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link \" aria-current=\"page\" href=\"#\">\r\n                Home\r\n              </a>\r\n            </li>\r\n          </ul>\r\n\r\n          <div class=\"form-check form-switch\">\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              onClick={props.togglemode}\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label\r\n              className={`form-check-label text-${\r\n                props.mode === \"light\" ? \"dark\" : \"light\"\r\n              }`}\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              Dark Mode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpclick = () => {\r\n    setText(text.toUpperCase());\r\n    props.showalert(\"Converted to uppercase.\", \"success\");\r\n  };\r\n\r\n  const handleLowclick = () => {\r\n    setText(text.toLowerCase());\r\n    props.showalert(\"Converted to lowercase.\", \"success\");\r\n  };\r\n\r\n  const handleClear = () => {\r\n    setText(\"\");\r\n    props.showalert(\"Cleared the textarea.\", \"danger\");\r\n  };\r\n\r\n  const handleCapitalised = () => {\r\n    const ar = text.split(\".\");\r\n    let str = \"\";\r\n    ar.forEach((element) => {\r\n      element = element.trim();\r\n      str += element.charAt(0).toUpperCase() + element.slice(1) + \". \";\r\n    });\r\n\r\n    setText(str);\r\n    props.showalert(\"Capitalised first letter of each sentence.\", \"warning\");\r\n  };\r\n\r\n  const handleCopy = () => {\r\n    navigator.clipboard.writeText(text);\r\n    props.showalert(\"Copied to clipboard!\", \"primary\");\r\n  };\r\n\r\n  const handleOnchange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const [text, setText] = useState(\"\");\r\n\r\n  //main template\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <h1>{props.heading}</h1>\r\n        <div class=\"mb-3\">\r\n          <textarea\r\n            className={`form-control  text-${\r\n              props.mode === \"light\" ? \"dark\" : \"light\"\r\n            }`}\r\n            style={{\r\n              backgroundColor: props.mode === \"light\" ? \"white\" : \"#6c757d\",\r\n              color: props.mode === \"light\" ? \"#6c757d\" : \"white\",\r\n            }}\r\n            value={text}\r\n            placeholder=\"Enter text here....\"\r\n            onChange={handleOnchange}\r\n            id=\"myBox\"\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleUpclick}>\r\n          Convert to uppercase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleLowclick}>\r\n          Convert to lowercase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleCapitalised}>\r\n          Convert to capitalised case\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>\r\n          Copy Text\r\n        </button>\r\n        <button className=\"btn btn-danger  mx-1\" onClick={handleClear}>\r\n          Clear Text\r\n        </button>\r\n      </div>\r\n      <div className=\"container my-3\">\r\n        <h2>Your Text Summary</h2>\r\n        <p>\r\n          Words : {text.trim() === \"\" ? 0 : text.trim().split(\" \").length} |\r\n          Characters : {text.length}\r\n        </p>\r\n        <p>\r\n          Can be read in {0.008 * (text === \"\" ? 0 : text.split(\" \").length)}{\" \"}\r\n          minutes.\r\n        </p>\r\n        <h2>Preview</h2>\r\n        <p>{text}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Alerts(props) {\r\n  const capitalise = (word) => {\r\n    let str = word.toLowerCase();\r\n    return str.charAt(0).toUpperCase() + str.slice(1);\r\n  };\r\n\r\n  return (\r\n    props.alert && (\r\n      <div\r\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>{capitalise(props.alert.type)}</strong>: {props.alert.msg}\r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport default Alerts;\r\n","import \"./App.css\";\nimport React, { useState } from \"react\";\n// import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport Alerts from \"./components/Alerts\";\n// import About from \"./components/About\";\n\nfunction App() {\n  const [mode, setmode] = useState(\"light\");\n  const [alert, setalert] = useState(null);\n\n  const showAlert = (msg, type) => {\n    setalert({\n      msg: msg,\n      type: type,\n    });\n    setTimeout(() => {\n      setalert(null);\n    }, 1500);\n  };\n\n  const toggleMode = () => {\n    mode === \"light\" ? setmode(\"dark\") : setmode(\"light\");\n\n    document.body.style.background = mode === \"light\" ? \"#07223c\" : \"white\";\n    mode === \"dark\"\n      ? showAlert(\"Dark mode disabled successfully.\", \"success\")\n      : showAlert(\"Dark mode enabled successfully.\", \"success\");\n  };\n  return (\n    <>\n      {/* <Router> */}\n        <Navbar\n          title=\"TextUtils\"\n          aboutText=\"About\"\n          mode={mode}\n          togglemode={toggleMode}\n        />\n        <Alerts alert={alert} />\n        <div\n          className=\"container my-3\"\n          style={{\n            color: mode === \"light\" ? \"#6c757d\" : \"white\",\n          }}\n        >\n          <TextForm\n            heading=\"Enter the text to analyse\"\n            mode={mode}\n            showalert={showAlert}\n          />\n          {/* <Switch>\n            <Route exact path=\"/about\">\n              <About mode={mode}/>\n            </Route>\n            <Route exact path=\"/\">\n              <TextForm\n                heading=\"Enter the text to analyse\"\n                mode={mode}\n                showalert={showAlert}\n              />\n            </Route>\n          </Switch> */}\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}